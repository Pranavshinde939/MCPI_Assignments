
Day11_RTC_Timer_ASM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001344  08001344  00002344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013d8  080013d8  00003058  2**0
                  CONTENTS
  4 .ARM          00000008  080013d8  080013d8  000023d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080013e0  080013e0  00003058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013e0  080013e0  000023e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013e4  080013e4  000023e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  080013e8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003058  2**0
                  CONTENTS
 10 .bss          00000170  20000058  20000058  00003058  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  00003058  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019ed  00000000  00000000  00003082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006ef  00000000  00000000  00004a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00005160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d7  00000000  00000000  000052a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001429  00000000  00000000  00005377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cdd  00000000  00000000  000067a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c3fb  00000000  00000000  0000847d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00094878  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000878  00000000  00000000  000948bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  00095134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  00095153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000058 	.word	0x20000058
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800132c 	.word	0x0800132c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	0800132c 	.word	0x0800132c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b093      	sub	sp, #76	@ 0x4c
 80002c4:	af02      	add	r7, sp, #8
	char str1[24], str2[20];
	RTC_Date d, dt = { .Date = 28, .Month = 02, .Year = 24, .WeekDay = 7 };
 80002c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000374 <main+0xb4>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	60fb      	str	r3, [r7, #12]
	RTC_Time t, tm = { .Hours = 23, .Minutes = 59, .Seconds = 50 };
 80002cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000378 <main+0xb8>)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	6812      	ldr	r2, [r2, #0]
 80002d2:	4611      	mov	r1, r2
 80002d4:	8019      	strh	r1, [r3, #0]
 80002d6:	3302      	adds	r3, #2
 80002d8:	0c12      	lsrs	r2, r2, #16
 80002da:	701a      	strb	r2, [r3, #0]
	//28-Feb-2024 23:59:50
	SystemInit();
 80002dc:	f000 fa3a 	bl	8000754 <SystemInit>
	RTC_Init(&dt, &tm);
 80002e0:	1d3a      	adds	r2, r7, #4
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	4611      	mov	r1, r2
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f8ab 	bl	8000444 <RTC_Init>
	UartInit(BAUD_9600);
 80002ee:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80002f2:	f000 fa81 	bl	80007f8 <UartInit>
	UartPuts("RTC Assignment : 1\n");
 80002f6:	4821      	ldr	r0, [pc, #132]	@ (800037c <main+0xbc>)
 80002f8:	f000 faee 	bl	80008d8 <UartPuts>

	while(1) {
		RTC_GetTime(&t);
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f9b7 	bl	8000674 <RTC_GetTime>
		RTC_GetDate(&d);
 8000306:	f107 0310 	add.w	r3, r7, #16
 800030a:	4618      	mov	r0, r3
 800030c:	f000 f96c 	bl	80005e8 <RTC_GetDate>
		sprintf(str1, "DT=%02d-%02d-%02d W=%d", d.Date, d.Month, d.Year, d.WeekDay);
 8000310:	7c7b      	ldrb	r3, [r7, #17]
 8000312:	4619      	mov	r1, r3
 8000314:	7c3b      	ldrb	r3, [r7, #16]
 8000316:	461c      	mov	r4, r3
 8000318:	7cbb      	ldrb	r3, [r7, #18]
 800031a:	7cfa      	ldrb	r2, [r7, #19]
 800031c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000320:	9201      	str	r2, [sp, #4]
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	4623      	mov	r3, r4
 8000326:	460a      	mov	r2, r1
 8000328:	4915      	ldr	r1, [pc, #84]	@ (8000380 <main+0xc0>)
 800032a:	f000 fb67 	bl	80009fc <siprintf>
		sprintf(str2, "TM=%02d:%02d:%02d", t.Hours, t.Minutes, t.Seconds);
 800032e:	7a3b      	ldrb	r3, [r7, #8]
 8000330:	461a      	mov	r2, r3
 8000332:	7a7b      	ldrb	r3, [r7, #9]
 8000334:	4619      	mov	r1, r3
 8000336:	7abb      	ldrb	r3, [r7, #10]
 8000338:	f107 0014 	add.w	r0, r7, #20
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	460b      	mov	r3, r1
 8000340:	4910      	ldr	r1, [pc, #64]	@ (8000384 <main+0xc4>)
 8000342:	f000 fb5b 	bl	80009fc <siprintf>
		UartPuts("\rDate : ");
 8000346:	4810      	ldr	r0, [pc, #64]	@ (8000388 <main+0xc8>)
 8000348:	f000 fac6 	bl	80008d8 <UartPuts>
		UartPuts(str1);
 800034c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fac1 	bl	80008d8 <UartPuts>
		UartPuts("	Time : ");
 8000356:	480d      	ldr	r0, [pc, #52]	@ (800038c <main+0xcc>)
 8000358:	f000 fabe 	bl	80008d8 <UartPuts>
		UartPuts(str2);
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fab9 	bl	80008d8 <UartPuts>
		DelayMs(500);
 8000366:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800036a:	f7ff ff81 	bl	8000270 <DelayMs>
		RTC_GetTime(&t);
 800036e:	bf00      	nop
 8000370:	e7c4      	b.n	80002fc <main+0x3c>
 8000372:	bf00      	nop
 8000374:	0800139c 	.word	0x0800139c
 8000378:	080013a0 	.word	0x080013a0
 800037c:	08001344 	.word	0x08001344
 8000380:	08001358 	.word	0x08001358
 8000384:	08001370 	.word	0x08001370
 8000388:	08001384 	.word	0x08001384
 800038c:	08001390 	.word	0x08001390

08000390 <Bin2Bcd>:

#include "rtc.h"

#include "rtc.h"

uint16_t Bin2Bcd(uint16_t val) {
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	uint16_t unit = val % 10;
 800039a:	88fa      	ldrh	r2, [r7, #6]
 800039c:	4b16      	ldr	r3, [pc, #88]	@ (80003f8 <Bin2Bcd+0x68>)
 800039e:	fba3 1302 	umull	r1, r3, r3, r2
 80003a2:	08d9      	lsrs	r1, r3, #3
 80003a4:	460b      	mov	r3, r1
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	440b      	add	r3, r1
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	1ad3      	subs	r3, r2, r3
 80003ae:	81fb      	strh	r3, [r7, #14]
	uint16_t tens = (val / 10) % 10;
 80003b0:	88fb      	ldrh	r3, [r7, #6]
 80003b2:	4a11      	ldr	r2, [pc, #68]	@ (80003f8 <Bin2Bcd+0x68>)
 80003b4:	fba2 2303 	umull	r2, r3, r2, r3
 80003b8:	08db      	lsrs	r3, r3, #3
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <Bin2Bcd+0x68>)
 80003be:	fba3 1302 	umull	r1, r3, r3, r2
 80003c2:	08d9      	lsrs	r1, r3, #3
 80003c4:	460b      	mov	r3, r1
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	440b      	add	r3, r1
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	1ad3      	subs	r3, r2, r3
 80003ce:	81bb      	strh	r3, [r7, #12]
//	uint16_t hundreds = (val / 100) % 10;
//	uint16_t thousands = (val / 1000) % 10;
	uint16_t res = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	817b      	strh	r3, [r7, #10]
	res |= unit;
 80003d4:	897a      	ldrh	r2, [r7, #10]
 80003d6:	89fb      	ldrh	r3, [r7, #14]
 80003d8:	4313      	orrs	r3, r2
 80003da:	817b      	strh	r3, [r7, #10]
	res |= tens << 4;
 80003dc:	89bb      	ldrh	r3, [r7, #12]
 80003de:	011b      	lsls	r3, r3, #4
 80003e0:	b21a      	sxth	r2, r3
 80003e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	b21b      	sxth	r3, r3
 80003ea:	817b      	strh	r3, [r7, #10]
//	res |= hundreds << 8;
//	res |= thousands << 12;
	return res;
 80003ec:	897b      	ldrh	r3, [r7, #10]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	cccccccd 	.word	0xcccccccd

080003fc <Bcd2Bin>:

uint16_t Bcd2Bin(uint16_t val) {
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	80fb      	strh	r3, [r7, #6]
	uint16_t unit = (val & 0x0F);
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	f003 030f 	and.w	r3, r3, #15
 800040c:	81fb      	strh	r3, [r7, #14]
	uint16_t tens = ((val >> 4) & 0x0F) * 10;
 800040e:	88fb      	ldrh	r3, [r7, #6]
 8000410:	091b      	lsrs	r3, r3, #4
 8000412:	b29b      	uxth	r3, r3
 8000414:	f003 030f 	and.w	r3, r3, #15
 8000418:	b29b      	uxth	r3, r3
 800041a:	461a      	mov	r2, r3
 800041c:	0092      	lsls	r2, r2, #2
 800041e:	4413      	add	r3, r2
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	81bb      	strh	r3, [r7, #12]
//	uint16_t hundreds = ((val >> 8) & 0x0F) * 100;
//	uint16_t thousands = ((val >> 12) & 0x0F) * 1000;
	uint16_t res = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	817b      	strh	r3, [r7, #10]
	res += unit;
 8000428:	897a      	ldrh	r2, [r7, #10]
 800042a:	89fb      	ldrh	r3, [r7, #14]
 800042c:	4413      	add	r3, r2
 800042e:	817b      	strh	r3, [r7, #10]
	res += tens;
 8000430:	897a      	ldrh	r2, [r7, #10]
 8000432:	89bb      	ldrh	r3, [r7, #12]
 8000434:	4413      	add	r3, r2
 8000436:	817b      	strh	r3, [r7, #10]
//	res += hundreds;
//	res += thousands;
	return res;
 8000438:	897b      	ldrh	r3, [r7, #10]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <RTC_Init>:


void RTC_Init(RTC_Date *dt, RTC_Time *tm) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
	// Initialize RTC
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;		//enable peripheral clock power
 800044e:	4b28      	ldr	r3, [pc, #160]	@ (80004f0 <RTC_Init+0xac>)
 8000450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000452:	4a27      	ldr	r2, [pc, #156]	@ (80004f0 <RTC_Init+0xac>)
 8000454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000458:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;			//enable access to the RTC registers (stm32 manual 5.4)
 800045a:	4b26      	ldr	r3, [pc, #152]	@ (80004f4 <RTC_Init+0xb0>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a25      	ldr	r2, [pc, #148]	@ (80004f4 <RTC_Init+0xb0>)
 8000460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000464:	6013      	str	r3, [r2, #0]

	RCC->CSR |= RCC_CSR_LSION;				//enable LSI (stm32 manual 7.3.21)
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <RTC_Init+0xac>)
 8000468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800046a:	4a21      	ldr	r2, [pc, #132]	@ (80004f0 <RTC_Init+0xac>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY));	//wait for LSI ready flag
 8000472:	bf00      	nop
 8000474:	4b1e      	ldr	r3, [pc, #120]	@ (80004f0 <RTC_Init+0xac>)
 8000476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000478:	f003 0302 	and.w	r3, r3, #2
 800047c:	2b00      	cmp	r3, #0
 800047e:	d0f9      	beq.n	8000474 <RTC_Init+0x30>

	RCC->BDCR |= RCC_BDCR_RTCEN | RCC_BDCR_RTCSEL_1;    // select LSI (32 KHz) and enable RTC (stm32 manual 7.3.21)
 8000480:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <RTC_Init+0xac>)
 8000482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000484:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <RTC_Init+0xac>)
 8000486:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 800048a:	6713      	str	r3, [r2, #112]	@ 0x70

	RTC->WPR = 0xCA;			// enter key to unlock write protection
 800048c:	4b1a      	ldr	r3, [pc, #104]	@ (80004f8 <RTC_Init+0xb4>)
 800048e:	22ca      	movs	r2, #202	@ 0xca
 8000490:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;			// key sequence must be 0xCA and then 0x53 (stm32 manual 26.3.5)
 8000492:	4b19      	ldr	r3, [pc, #100]	@ (80004f8 <RTC_Init+0xb4>)
 8000494:	2253      	movs	r2, #83	@ 0x53
 8000496:	625a      	str	r2, [r3, #36]	@ 0x24

	RTC->ISR |= RTC_ISR_INIT;	// enable rtc setup (i.e. register init)
 8000498:	4b17      	ldr	r3, [pc, #92]	@ (80004f8 <RTC_Init+0xb4>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4a16      	ldr	r2, [pc, #88]	@ (80004f8 <RTC_Init+0xb4>)
 800049e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004a2:	60d3      	str	r3, [r2, #12]
	while(!(RTC->ISR & RTC_ISR_INITF));	// wait until register update is allowed
 80004a4:	bf00      	nop
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <RTC_Init+0xb4>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <RTC_Init+0x62>
	//	rtc_cntrclk = rtcclk / (async div + 1) * (sync div + 1)
	//		rtc_cntrclk should be 1 Hz (for accurate timing)
	//		high async div (7-bit) => low power | sync div (15-bit)
	//		for LSI = 32KHz = 32000 Hz and rtc_cntrclk = 1 Hz,
	//			if async div = 128, then sync div = 250
	RTC->PRER = ((128-1) << RTC_PRER_PREDIV_A_Pos) | ((250-1) << RTC_PRER_PREDIV_S_Pos);
 80004b2:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <RTC_Init+0xb4>)
 80004b4:	4a11      	ldr	r2, [pc, #68]	@ (80004fc <RTC_Init+0xb8>)
 80004b6:	611a      	str	r2, [r3, #16]

	RTC_SetDate(dt);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 f821 	bl	8000500 <RTC_SetDate>
	RTC_SetTime(tm);
 80004be:	6838      	ldr	r0, [r7, #0]
 80004c0:	f000 f85c 	bl	800057c <RTC_SetTime>

	RTC->CR |= RTC_CR_BYPSHAD;		// rtc date/time should be read from calendar registers (not shadow registers)
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <RTC_Init+0xb4>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	4a0b      	ldr	r2, [pc, #44]	@ (80004f8 <RTC_Init+0xb4>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;		// rtc is free running now (not in initialization mode)
 80004d0:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <RTC_Init+0xb4>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a08      	ldr	r2, [pc, #32]	@ (80004f8 <RTC_Init+0xb4>)
 80004d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004da:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;			// disable access to RTC registers (write protection)
 80004dc:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <RTC_Init+0xb0>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a04      	ldr	r2, [pc, #16]	@ (80004f4 <RTC_Init+0xb0>)
 80004e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004e6:	6013      	str	r3, [r2, #0]
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40023800 	.word	0x40023800
 80004f4:	40007000 	.word	0x40007000
 80004f8:	40002800 	.word	0x40002800
 80004fc:	007f00f9 	.word	0x007f00f9

08000500 <RTC_SetDate>:

void RTC_SetDate(RTC_Date *dt) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	uint8_t date = Bin2Bcd(dt->Date);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	785b      	ldrb	r3, [r3, #1]
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff3f 	bl	8000390 <Bin2Bcd>
 8000512:	4603      	mov	r3, r0
 8000514:	73fb      	strb	r3, [r7, #15]
	uint8_t month = Bin2Bcd(dt->Month);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ff38 	bl	8000390 <Bin2Bcd>
 8000520:	4603      	mov	r3, r0
 8000522:	73bb      	strb	r3, [r7, #14]
	uint8_t year = Bin2Bcd(dt->Year);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <Bin2Bcd>
 800052e:	4603      	mov	r3, r0
 8000530:	737b      	strb	r3, [r7, #13]
	uint8_t weekday = Bin2Bcd(dt->WeekDay);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	78db      	ldrb	r3, [r3, #3]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff2a 	bl	8000390 <Bin2Bcd>
 800053c:	4603      	mov	r3, r0
 800053e:	733b      	strb	r3, [r7, #12]
	uint32_t dr = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
	dr |= year << RTC_DR_YU_Pos;
 8000544:	7b7b      	ldrb	r3, [r7, #13]
 8000546:	041b      	lsls	r3, r3, #16
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	4313      	orrs	r3, r2
 800054c:	60bb      	str	r3, [r7, #8]
	dr |= weekday << RTC_DR_WDU_Pos;
 800054e:	7b3b      	ldrb	r3, [r7, #12]
 8000550:	035b      	lsls	r3, r3, #13
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	4313      	orrs	r3, r2
 8000556:	60bb      	str	r3, [r7, #8]
	dr |= month << RTC_DR_MU_Pos;
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	4313      	orrs	r3, r2
 8000560:	60bb      	str	r3, [r7, #8]
	dr |= date << RTC_DR_DU_Pos;
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	4313      	orrs	r3, r2
 8000568:	60bb      	str	r3, [r7, #8]
	RTC->DR = dr;
 800056a:	4a03      	ldr	r2, [pc, #12]	@ (8000578 <RTC_SetDate+0x78>)
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	6053      	str	r3, [r2, #4]
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40002800 	.word	0x40002800

0800057c <RTC_SetTime>:

void RTC_SetTime(RTC_Time *tm) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	uint8_t hrs = Bin2Bcd(tm->Hours);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ff01 	bl	8000390 <Bin2Bcd>
 800058e:	4603      	mov	r3, r0
 8000590:	73fb      	strb	r3, [r7, #15]
	uint8_t min = Bin2Bcd(tm->Minutes);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	785b      	ldrb	r3, [r3, #1]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fefa 	bl	8000390 <Bin2Bcd>
 800059c:	4603      	mov	r3, r0
 800059e:	73bb      	strb	r3, [r7, #14]
	uint8_t sec = Bin2Bcd(tm->Seconds);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	789b      	ldrb	r3, [r3, #2]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fef3 	bl	8000390 <Bin2Bcd>
 80005aa:	4603      	mov	r3, r0
 80005ac:	737b      	strb	r3, [r7, #13]
	uint32_t tr = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
	tr |= hrs << RTC_TR_HU_Pos;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	041b      	lsls	r3, r3, #16
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
	tr |= min << RTC_TR_MNU_Pos;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	021b      	lsls	r3, r3, #8
 80005c0:	68ba      	ldr	r2, [r7, #8]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	60bb      	str	r3, [r7, #8]
	tr |= sec << RTC_TR_SU_Pos;
 80005c6:	7b7b      	ldrb	r3, [r7, #13]
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	60bb      	str	r3, [r7, #8]
	tr &= ~RTC_TR_PM; // 24-hours mode
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80005d4:	60bb      	str	r3, [r7, #8]
	RTC->TR = tr;
 80005d6:	4a03      	ldr	r2, [pc, #12]	@ (80005e4 <RTC_SetTime+0x68>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40002800 	.word	0x40002800

080005e8 <RTC_GetDate>:

void RTC_GetDate(RTC_Date *dt) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint32_t dr = RTC->DR;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <RTC_GetDate+0x88>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	60fb      	str	r3, [r7, #12]
	uint8_t val = (dr & (RTC_DR_DT_Msk | RTC_DR_DU_Msk)) >> RTC_DR_DU_Pos;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005fe:	72fb      	strb	r3, [r7, #11]
	dt->Date = Bcd2Bin(val);
 8000600:	7afb      	ldrb	r3, [r7, #11]
 8000602:	b29b      	uxth	r3, r3
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fef9 	bl	80003fc <Bcd2Bin>
 800060a:	4603      	mov	r3, r0
 800060c:	b2da      	uxtb	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	705a      	strb	r2, [r3, #1]
	val = (dr & (RTC_DR_MT_Msk | RTC_DR_MU_Msk)) >> RTC_DR_MU_Pos;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f003 031f 	and.w	r3, r3, #31
 800061c:	72fb      	strb	r3, [r7, #11]
	dt->Month = Bcd2Bin(val);
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	b29b      	uxth	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff feea 	bl	80003fc <Bcd2Bin>
 8000628:	4603      	mov	r3, r0
 800062a:	b2da      	uxtb	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	701a      	strb	r2, [r3, #0]
	val = (dr & (RTC_DR_YT_Msk | RTC_DR_YU_Msk)) >> RTC_DR_YU_Pos;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	0c1b      	lsrs	r3, r3, #16
 8000634:	72fb      	strb	r3, [r7, #11]
	dt->Year = Bcd2Bin(val);
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	b29b      	uxth	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fede 	bl	80003fc <Bcd2Bin>
 8000640:	4603      	mov	r3, r0
 8000642:	b2da      	uxtb	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	709a      	strb	r2, [r3, #2]
	val = (dr & (RTC_DR_WDU_Msk)) >> RTC_DR_WDU_Pos;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	0b5b      	lsrs	r3, r3, #13
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	72fb      	strb	r3, [r7, #11]
	dt->WeekDay = Bcd2Bin(val);
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	b29b      	uxth	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fecf 	bl	80003fc <Bcd2Bin>
 800065e:	4603      	mov	r3, r0
 8000660:	b2da      	uxtb	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	70da      	strb	r2, [r3, #3]
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40002800 	.word	0x40002800

08000674 <RTC_GetTime>:

void RTC_GetTime(RTC_Time *tm) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint32_t tr = RTC->TR;
 800067c:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <RTC_GetTime+0x70>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]
	uint8_t val = (tr & (RTC_TR_HT_Msk | RTC_TR_HU_Msk)) >> RTC_TR_HU_Pos;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	0c1b      	lsrs	r3, r3, #16
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800068c:	72fb      	strb	r3, [r7, #11]
	tm->Hours = Bcd2Bin(val);
 800068e:	7afb      	ldrb	r3, [r7, #11]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff feb2 	bl	80003fc <Bcd2Bin>
 8000698:	4603      	mov	r3, r0
 800069a:	b2da      	uxtb	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	701a      	strb	r2, [r3, #0]
	val = (tr & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk)) >> RTC_TR_MNU_Pos;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	0a1b      	lsrs	r3, r3, #8
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006aa:	72fb      	strb	r3, [r7, #11]
	tm->Minutes = Bcd2Bin(val);
 80006ac:	7afb      	ldrb	r3, [r7, #11]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fea3 	bl	80003fc <Bcd2Bin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
	val = (tr & (RTC_TR_ST_Msk | RTC_TR_SU_Msk)) >> RTC_TR_SU_Pos;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006c6:	72fb      	strb	r3, [r7, #11]
	tm->Seconds = Bcd2Bin(val);
 80006c8:	7afb      	ldrb	r3, [r7, #11]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fe95 	bl	80003fc <Bcd2Bin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	709a      	strb	r2, [r3, #2]
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40002800 	.word	0x40002800

080006e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f0:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <_sbrk+0x5c>)
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <_sbrk+0x60>)
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <_sbrk+0x64>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d102      	bne.n	800070a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <_sbrk+0x64>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <_sbrk+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	429a      	cmp	r2, r3
 8000716:	d207      	bcs.n	8000728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000718:	f000 f990 	bl	8000a3c <__errno>
 800071c:	4603      	mov	r3, r0
 800071e:	220c      	movs	r2, #12
 8000720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000726:	e009      	b.n	800073c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <_sbrk+0x64>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072e:	4b07      	ldr	r3, [pc, #28]	@ (800074c <_sbrk+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	4a05      	ldr	r2, [pc, #20]	@ (800074c <_sbrk+0x64>)
 8000738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20020000 	.word	0x20020000
 8000748:	00000400 	.word	0x00000400
 800074c:	20000074 	.word	0x20000074
 8000750:	200001c8 	.word	0x200001c8

08000754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  DWT_Init();
 8000758:	f000 f802 	bl	8000760 <DWT_Init>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <DWT_Init+0x58>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <DWT_Init+0x58>)
 800076a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800076e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <DWT_Init+0x58>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	4a10      	ldr	r2, [pc, #64]	@ (80007b8 <DWT_Init+0x58>)
 8000776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800077a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <DWT_Init+0x5c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0e      	ldr	r2, [pc, #56]	@ (80007bc <DWT_Init+0x5c>)
 8000782:	f023 0301 	bic.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <DWT_Init+0x5c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <DWT_Init+0x5c>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <DWT_Init+0x5c>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800079a:	bf00      	nop
    __ASM volatile ("NOP");
 800079c:	bf00      	nop
    __ASM volatile ("NOP");
 800079e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <DWT_Init+0x5c>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf0c      	ite	eq
 80007a8:	2301      	moveq	r3, #1
 80007aa:	2300      	movne	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000edf0 	.word	0xe000edf0
 80007bc:	e0001000 	.word	0xe0001000

080007c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	db0b      	blt.n	80007ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f003 021f 	and.w	r2, r3, #31
 80007d8:	4906      	ldr	r1, [pc, #24]	@ (80007f4 <__NVIC_EnableIRQ+0x34>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	095b      	lsrs	r3, r3, #5
 80007e0:	2001      	movs	r0, #1
 80007e2:	fa00 f202 	lsl.w	r2, r0, r2
 80007e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	e000e100 	.word	0xe000e100

080007f8 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000800:	4b32      	ldr	r3, [pc, #200]	@ (80008cc <UartInit+0xd4>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000804:	4a31      	ldr	r2, [pc, #196]	@ (80008cc <UartInit+0xd4>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 800080c:	4b30      	ldr	r3, [pc, #192]	@ (80008d0 <UartInit+0xd8>)
 800080e:	6a1b      	ldr	r3, [r3, #32]
 8000810:	4a2f      	ldr	r2, [pc, #188]	@ (80008d0 <UartInit+0xd8>)
 8000812:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000816:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000818:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <UartInit+0xd8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a2c      	ldr	r2, [pc, #176]	@ (80008d0 <UartInit+0xd8>)
 800081e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000822:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000824:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <UartInit+0xd8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a29      	ldr	r2, [pc, #164]	@ (80008d0 <UartInit+0xd8>)
 800082a:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800082e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <UartInit+0xd8>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	4a26      	ldr	r2, [pc, #152]	@ (80008d0 <UartInit+0xd8>)
 8000836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800083a:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 800083c:	4b24      	ldr	r3, [pc, #144]	@ (80008d0 <UartInit+0xd8>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a23      	ldr	r2, [pc, #140]	@ (80008d0 <UartInit+0xd8>)
 8000842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000846:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000848:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <UartInit+0xd8>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	4a20      	ldr	r2, [pc, #128]	@ (80008d0 <UartInit+0xd8>)
 800084e:	f023 030c 	bic.w	r3, r3, #12
 8000852:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000854:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <UartInit+0xd4>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <UartInit+0xd4>)
 800085a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000860:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <UartInit+0xdc>)
 8000862:	220c      	movs	r2, #12
 8000864:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 8000866:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <UartInit+0xdc>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 800086c:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <UartInit+0xdc>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000878:	d016      	beq.n	80008a8 <UartInit+0xb0>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000880:	d816      	bhi.n	80008b0 <UartInit+0xb8>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000888:	d004      	beq.n	8000894 <UartInit+0x9c>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000890:	d005      	beq.n	800089e <UartInit+0xa6>
 8000892:	e00d      	b.n	80008b0 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <UartInit+0xdc>)
 8000896:	f240 6283 	movw	r2, #1667	@ 0x683
 800089a:	609a      	str	r2, [r3, #8]
			break;
 800089c:	e008      	b.n	80008b0 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <UartInit+0xdc>)
 80008a0:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80008a4:	609a      	str	r2, [r3, #8]
			break;
 80008a6:	e003      	b.n	80008b0 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <UartInit+0xdc>)
 80008aa:	228b      	movs	r2, #139	@ 0x8b
 80008ac:	609a      	str	r2, [r3, #8]
			break;
 80008ae:	bf00      	nop
	}
	// enable uart interrupt in nvic
	NVIC_EnableIRQ(USART2_IRQn);
 80008b0:	2026      	movs	r0, #38	@ 0x26
 80008b2:	f7ff ff85 	bl	80007c0 <__NVIC_EnableIRQ>
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80008b6:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <UartInit+0xdc>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <UartInit+0xdc>)
 80008bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008c0:	60d3      	str	r3, [r2, #12]
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40004400 	.word	0x40004400

080008d8 <UartPuts>:

char *tx_string;
int tx_index = 0;
volatile int tx_complete = 1;
void UartPuts(char str[]) {
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	// wait for last string completion
	while(!tx_complete)
 80008e0:	bf00      	nop
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <UartPuts+0x54>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0fb      	beq.n	80008e2 <UartPuts+0xa>
		;
	tx_complete = 0;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <UartPuts+0x54>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
	tx_string = str;
 80008f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <UartPuts+0x58>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
	// send first char
	tx_index = 0;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <UartPuts+0x5c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
	USART2->DR = tx_string[tx_index];
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <UartPuts+0x58>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0c      	ldr	r2, [pc, #48]	@ (8000934 <UartPuts+0x5c>)
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	4413      	add	r3, r2
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <UartPuts+0x60>)
 800090a:	605a      	str	r2, [r3, #4]
	tx_index++;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <UartPuts+0x5c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a08      	ldr	r2, [pc, #32]	@ (8000934 <UartPuts+0x5c>)
 8000914:	6013      	str	r3, [r2, #0]
	// enable uart txeie interrupt
	USART2->CR1 |= BV(USART_CR1_TXEIE_Pos);
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <UartPuts+0x60>)
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	4a07      	ldr	r2, [pc, #28]	@ (8000938 <UartPuts+0x60>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000920:	60d3      	str	r3, [r2, #12]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000004 	.word	0x20000004
 8000930:	20000078 	.word	0x20000078
 8000934:	2000007c 	.word	0x2000007c
 8000938:	40004400 	.word	0x40004400

0800093c <USART2_IRQHandler>:
void USART2_IRQHandler(void) {
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	// check if last char tx
	if((USART2->SR & BV(USART_SR_TXE_Pos)) != 0) {
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <USART2_IRQHandler+0x5c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000948:	2b00      	cmp	r3, #0
 800094a:	d021      	beq.n	8000990 <USART2_IRQHandler+0x54>
		// send next char if available
		if(tx_string[tx_index] != '\0') {
 800094c:	4b13      	ldr	r3, [pc, #76]	@ (800099c <USART2_IRQHandler+0x60>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <USART2_IRQHandler+0x64>)
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00d      	beq.n	8000978 <USART2_IRQHandler+0x3c>
			USART2->DR = tx_string[tx_index];
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <USART2_IRQHandler+0x60>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <USART2_IRQHandler+0x64>)
 8000962:	6812      	ldr	r2, [r2, #0]
 8000964:	4413      	add	r3, r2
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <USART2_IRQHandler+0x5c>)
 800096a:	605a      	str	r2, [r3, #4]
			tx_index++;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <USART2_IRQHandler+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <USART2_IRQHandler+0x64>)
 8000974:	6013      	str	r3, [r2, #0]
			tx_complete = 1;
			// disable uart txeie interrupt
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
		}
	}
}
 8000976:	e00b      	b.n	8000990 <USART2_IRQHandler+0x54>
			tx_string = NULL;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <USART2_IRQHandler+0x60>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
			tx_complete = 1;
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <USART2_IRQHandler+0x68>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <USART2_IRQHandler+0x5c>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4a03      	ldr	r2, [pc, #12]	@ (8000998 <USART2_IRQHandler+0x5c>)
 800098a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40004400 	.word	0x40004400
 800099c:	20000078 	.word	0x20000078
 80009a0:	2000007c 	.word	0x2000007c
 80009a4:	20000004 	.word	0x20000004

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ac:	f7ff fed2 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	@ (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	@ (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d6:	f000 f837 	bl	8000a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff fc71 	bl	80002c0 <main>

080009de <LoopForever>:

LoopForever:
  b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80009ec:	080013e8 	.word	0x080013e8
  ldr r2, =_sbss
 80009f0:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80009f4:	200001c8 	.word	0x200001c8

080009f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <siprintf>:
 80009fc:	b40e      	push	{r1, r2, r3}
 80009fe:	b500      	push	{lr}
 8000a00:	b09c      	sub	sp, #112	@ 0x70
 8000a02:	ab1d      	add	r3, sp, #116	@ 0x74
 8000a04:	9002      	str	r0, [sp, #8]
 8000a06:	9006      	str	r0, [sp, #24]
 8000a08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <siprintf+0x38>)
 8000a0e:	9107      	str	r1, [sp, #28]
 8000a10:	9104      	str	r1, [sp, #16]
 8000a12:	4909      	ldr	r1, [pc, #36]	@ (8000a38 <siprintf+0x3c>)
 8000a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a18:	9105      	str	r1, [sp, #20]
 8000a1a:	6800      	ldr	r0, [r0, #0]
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	a902      	add	r1, sp, #8
 8000a20:	f000 f98c 	bl	8000d3c <_svfiprintf_r>
 8000a24:	9b02      	ldr	r3, [sp, #8]
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	b01c      	add	sp, #112	@ 0x70
 8000a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a30:	b003      	add	sp, #12
 8000a32:	4770      	bx	lr
 8000a34:	20000008 	.word	0x20000008
 8000a38:	ffff0208 	.word	0xffff0208

08000a3c <__errno>:
 8000a3c:	4b01      	ldr	r3, [pc, #4]	@ (8000a44 <__errno+0x8>)
 8000a3e:	6818      	ldr	r0, [r3, #0]
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008

08000a48 <__libc_init_array>:
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8000a80 <__libc_init_array+0x38>)
 8000a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8000a84 <__libc_init_array+0x3c>)
 8000a4e:	1b64      	subs	r4, r4, r5
 8000a50:	10a4      	asrs	r4, r4, #2
 8000a52:	2600      	movs	r6, #0
 8000a54:	42a6      	cmp	r6, r4
 8000a56:	d109      	bne.n	8000a6c <__libc_init_array+0x24>
 8000a58:	4d0b      	ldr	r5, [pc, #44]	@ (8000a88 <__libc_init_array+0x40>)
 8000a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a8c <__libc_init_array+0x44>)
 8000a5c:	f000 fc66 	bl	800132c <_init>
 8000a60:	1b64      	subs	r4, r4, r5
 8000a62:	10a4      	asrs	r4, r4, #2
 8000a64:	2600      	movs	r6, #0
 8000a66:	42a6      	cmp	r6, r4
 8000a68:	d105      	bne.n	8000a76 <__libc_init_array+0x2e>
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
 8000a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a70:	4798      	blx	r3
 8000a72:	3601      	adds	r6, #1
 8000a74:	e7ee      	b.n	8000a54 <__libc_init_array+0xc>
 8000a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7a:	4798      	blx	r3
 8000a7c:	3601      	adds	r6, #1
 8000a7e:	e7f2      	b.n	8000a66 <__libc_init_array+0x1e>
 8000a80:	080013e0 	.word	0x080013e0
 8000a84:	080013e0 	.word	0x080013e0
 8000a88:	080013e0 	.word	0x080013e0
 8000a8c:	080013e4 	.word	0x080013e4

08000a90 <__retarget_lock_acquire_recursive>:
 8000a90:	4770      	bx	lr

08000a92 <__retarget_lock_release_recursive>:
 8000a92:	4770      	bx	lr

08000a94 <_free_r>:
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	4605      	mov	r5, r0
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	d041      	beq.n	8000b20 <_free_r+0x8c>
 8000a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000aa0:	1f0c      	subs	r4, r1, #4
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bfb8      	it	lt
 8000aa6:	18e4      	addlt	r4, r4, r3
 8000aa8:	f000 f8e0 	bl	8000c6c <__malloc_lock>
 8000aac:	4a1d      	ldr	r2, [pc, #116]	@ (8000b24 <_free_r+0x90>)
 8000aae:	6813      	ldr	r3, [r2, #0]
 8000ab0:	b933      	cbnz	r3, 8000ac0 <_free_r+0x2c>
 8000ab2:	6063      	str	r3, [r4, #4]
 8000ab4:	6014      	str	r4, [r2, #0]
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000abc:	f000 b8dc 	b.w	8000c78 <__malloc_unlock>
 8000ac0:	42a3      	cmp	r3, r4
 8000ac2:	d908      	bls.n	8000ad6 <_free_r+0x42>
 8000ac4:	6820      	ldr	r0, [r4, #0]
 8000ac6:	1821      	adds	r1, r4, r0
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	bf01      	itttt	eq
 8000acc:	6819      	ldreq	r1, [r3, #0]
 8000ace:	685b      	ldreq	r3, [r3, #4]
 8000ad0:	1809      	addeq	r1, r1, r0
 8000ad2:	6021      	streq	r1, [r4, #0]
 8000ad4:	e7ed      	b.n	8000ab2 <_free_r+0x1e>
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	b10b      	cbz	r3, 8000ae0 <_free_r+0x4c>
 8000adc:	42a3      	cmp	r3, r4
 8000ade:	d9fa      	bls.n	8000ad6 <_free_r+0x42>
 8000ae0:	6811      	ldr	r1, [r2, #0]
 8000ae2:	1850      	adds	r0, r2, r1
 8000ae4:	42a0      	cmp	r0, r4
 8000ae6:	d10b      	bne.n	8000b00 <_free_r+0x6c>
 8000ae8:	6820      	ldr	r0, [r4, #0]
 8000aea:	4401      	add	r1, r0
 8000aec:	1850      	adds	r0, r2, r1
 8000aee:	4283      	cmp	r3, r0
 8000af0:	6011      	str	r1, [r2, #0]
 8000af2:	d1e0      	bne.n	8000ab6 <_free_r+0x22>
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	6053      	str	r3, [r2, #4]
 8000afa:	4408      	add	r0, r1
 8000afc:	6010      	str	r0, [r2, #0]
 8000afe:	e7da      	b.n	8000ab6 <_free_r+0x22>
 8000b00:	d902      	bls.n	8000b08 <_free_r+0x74>
 8000b02:	230c      	movs	r3, #12
 8000b04:	602b      	str	r3, [r5, #0]
 8000b06:	e7d6      	b.n	8000ab6 <_free_r+0x22>
 8000b08:	6820      	ldr	r0, [r4, #0]
 8000b0a:	1821      	adds	r1, r4, r0
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	bf04      	itt	eq
 8000b10:	6819      	ldreq	r1, [r3, #0]
 8000b12:	685b      	ldreq	r3, [r3, #4]
 8000b14:	6063      	str	r3, [r4, #4]
 8000b16:	bf04      	itt	eq
 8000b18:	1809      	addeq	r1, r1, r0
 8000b1a:	6021      	streq	r1, [r4, #0]
 8000b1c:	6054      	str	r4, [r2, #4]
 8000b1e:	e7ca      	b.n	8000ab6 <_free_r+0x22>
 8000b20:	bd38      	pop	{r3, r4, r5, pc}
 8000b22:	bf00      	nop
 8000b24:	200001c4 	.word	0x200001c4

08000b28 <sbrk_aligned>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	4e0f      	ldr	r6, [pc, #60]	@ (8000b68 <sbrk_aligned+0x40>)
 8000b2c:	460c      	mov	r4, r1
 8000b2e:	6831      	ldr	r1, [r6, #0]
 8000b30:	4605      	mov	r5, r0
 8000b32:	b911      	cbnz	r1, 8000b3a <sbrk_aligned+0x12>
 8000b34:	f000 fba6 	bl	8001284 <_sbrk_r>
 8000b38:	6030      	str	r0, [r6, #0]
 8000b3a:	4621      	mov	r1, r4
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	f000 fba1 	bl	8001284 <_sbrk_r>
 8000b42:	1c43      	adds	r3, r0, #1
 8000b44:	d103      	bne.n	8000b4e <sbrk_aligned+0x26>
 8000b46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	bd70      	pop	{r4, r5, r6, pc}
 8000b4e:	1cc4      	adds	r4, r0, #3
 8000b50:	f024 0403 	bic.w	r4, r4, #3
 8000b54:	42a0      	cmp	r0, r4
 8000b56:	d0f8      	beq.n	8000b4a <sbrk_aligned+0x22>
 8000b58:	1a21      	subs	r1, r4, r0
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f000 fb92 	bl	8001284 <_sbrk_r>
 8000b60:	3001      	adds	r0, #1
 8000b62:	d1f2      	bne.n	8000b4a <sbrk_aligned+0x22>
 8000b64:	e7ef      	b.n	8000b46 <sbrk_aligned+0x1e>
 8000b66:	bf00      	nop
 8000b68:	200001c0 	.word	0x200001c0

08000b6c <_malloc_r>:
 8000b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b70:	1ccd      	adds	r5, r1, #3
 8000b72:	f025 0503 	bic.w	r5, r5, #3
 8000b76:	3508      	adds	r5, #8
 8000b78:	2d0c      	cmp	r5, #12
 8000b7a:	bf38      	it	cc
 8000b7c:	250c      	movcc	r5, #12
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	4606      	mov	r6, r0
 8000b82:	db01      	blt.n	8000b88 <_malloc_r+0x1c>
 8000b84:	42a9      	cmp	r1, r5
 8000b86:	d904      	bls.n	8000b92 <_malloc_r+0x26>
 8000b88:	230c      	movs	r3, #12
 8000b8a:	6033      	str	r3, [r6, #0]
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c68 <_malloc_r+0xfc>
 8000b96:	f000 f869 	bl	8000c6c <__malloc_lock>
 8000b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b9e:	461c      	mov	r4, r3
 8000ba0:	bb44      	cbnz	r4, 8000bf4 <_malloc_r+0x88>
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f7ff ffbf 	bl	8000b28 <sbrk_aligned>
 8000baa:	1c43      	adds	r3, r0, #1
 8000bac:	4604      	mov	r4, r0
 8000bae:	d158      	bne.n	8000c62 <_malloc_r+0xf6>
 8000bb0:	f8d8 4000 	ldr.w	r4, [r8]
 8000bb4:	4627      	mov	r7, r4
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d143      	bne.n	8000c42 <_malloc_r+0xd6>
 8000bba:	2c00      	cmp	r4, #0
 8000bbc:	d04b      	beq.n	8000c56 <_malloc_r+0xea>
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	eb04 0903 	add.w	r9, r4, r3
 8000bc8:	f000 fb5c 	bl	8001284 <_sbrk_r>
 8000bcc:	4581      	cmp	r9, r0
 8000bce:	d142      	bne.n	8000c56 <_malloc_r+0xea>
 8000bd0:	6821      	ldr	r1, [r4, #0]
 8000bd2:	1a6d      	subs	r5, r5, r1
 8000bd4:	4629      	mov	r1, r5
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	f7ff ffa6 	bl	8000b28 <sbrk_aligned>
 8000bdc:	3001      	adds	r0, #1
 8000bde:	d03a      	beq.n	8000c56 <_malloc_r+0xea>
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	442b      	add	r3, r5
 8000be4:	6023      	str	r3, [r4, #0]
 8000be6:	f8d8 3000 	ldr.w	r3, [r8]
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	bb62      	cbnz	r2, 8000c48 <_malloc_r+0xdc>
 8000bee:	f8c8 7000 	str.w	r7, [r8]
 8000bf2:	e00f      	b.n	8000c14 <_malloc_r+0xa8>
 8000bf4:	6822      	ldr	r2, [r4, #0]
 8000bf6:	1b52      	subs	r2, r2, r5
 8000bf8:	d420      	bmi.n	8000c3c <_malloc_r+0xd0>
 8000bfa:	2a0b      	cmp	r2, #11
 8000bfc:	d917      	bls.n	8000c2e <_malloc_r+0xc2>
 8000bfe:	1961      	adds	r1, r4, r5
 8000c00:	42a3      	cmp	r3, r4
 8000c02:	6025      	str	r5, [r4, #0]
 8000c04:	bf18      	it	ne
 8000c06:	6059      	strne	r1, [r3, #4]
 8000c08:	6863      	ldr	r3, [r4, #4]
 8000c0a:	bf08      	it	eq
 8000c0c:	f8c8 1000 	streq.w	r1, [r8]
 8000c10:	5162      	str	r2, [r4, r5]
 8000c12:	604b      	str	r3, [r1, #4]
 8000c14:	4630      	mov	r0, r6
 8000c16:	f000 f82f 	bl	8000c78 <__malloc_unlock>
 8000c1a:	f104 000b 	add.w	r0, r4, #11
 8000c1e:	1d23      	adds	r3, r4, #4
 8000c20:	f020 0007 	bic.w	r0, r0, #7
 8000c24:	1ac2      	subs	r2, r0, r3
 8000c26:	bf1c      	itt	ne
 8000c28:	1a1b      	subne	r3, r3, r0
 8000c2a:	50a3      	strne	r3, [r4, r2]
 8000c2c:	e7af      	b.n	8000b8e <_malloc_r+0x22>
 8000c2e:	6862      	ldr	r2, [r4, #4]
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	bf0c      	ite	eq
 8000c34:	f8c8 2000 	streq.w	r2, [r8]
 8000c38:	605a      	strne	r2, [r3, #4]
 8000c3a:	e7eb      	b.n	8000c14 <_malloc_r+0xa8>
 8000c3c:	4623      	mov	r3, r4
 8000c3e:	6864      	ldr	r4, [r4, #4]
 8000c40:	e7ae      	b.n	8000ba0 <_malloc_r+0x34>
 8000c42:	463c      	mov	r4, r7
 8000c44:	687f      	ldr	r7, [r7, #4]
 8000c46:	e7b6      	b.n	8000bb6 <_malloc_r+0x4a>
 8000c48:	461a      	mov	r2, r3
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	d1fb      	bne.n	8000c48 <_malloc_r+0xdc>
 8000c50:	2300      	movs	r3, #0
 8000c52:	6053      	str	r3, [r2, #4]
 8000c54:	e7de      	b.n	8000c14 <_malloc_r+0xa8>
 8000c56:	230c      	movs	r3, #12
 8000c58:	6033      	str	r3, [r6, #0]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	f000 f80c 	bl	8000c78 <__malloc_unlock>
 8000c60:	e794      	b.n	8000b8c <_malloc_r+0x20>
 8000c62:	6005      	str	r5, [r0, #0]
 8000c64:	e7d6      	b.n	8000c14 <_malloc_r+0xa8>
 8000c66:	bf00      	nop
 8000c68:	200001c4 	.word	0x200001c4

08000c6c <__malloc_lock>:
 8000c6c:	4801      	ldr	r0, [pc, #4]	@ (8000c74 <__malloc_lock+0x8>)
 8000c6e:	f7ff bf0f 	b.w	8000a90 <__retarget_lock_acquire_recursive>
 8000c72:	bf00      	nop
 8000c74:	200001bc 	.word	0x200001bc

08000c78 <__malloc_unlock>:
 8000c78:	4801      	ldr	r0, [pc, #4]	@ (8000c80 <__malloc_unlock+0x8>)
 8000c7a:	f7ff bf0a 	b.w	8000a92 <__retarget_lock_release_recursive>
 8000c7e:	bf00      	nop
 8000c80:	200001bc 	.word	0x200001bc

08000c84 <__ssputs_r>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	688e      	ldr	r6, [r1, #8]
 8000c8a:	461f      	mov	r7, r3
 8000c8c:	42be      	cmp	r6, r7
 8000c8e:	680b      	ldr	r3, [r1, #0]
 8000c90:	4682      	mov	sl, r0
 8000c92:	460c      	mov	r4, r1
 8000c94:	4690      	mov	r8, r2
 8000c96:	d82d      	bhi.n	8000cf4 <__ssputs_r+0x70>
 8000c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000ca0:	d026      	beq.n	8000cf0 <__ssputs_r+0x6c>
 8000ca2:	6965      	ldr	r5, [r4, #20]
 8000ca4:	6909      	ldr	r1, [r1, #16]
 8000ca6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000caa:	eba3 0901 	sub.w	r9, r3, r1
 8000cae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000cb2:	1c7b      	adds	r3, r7, #1
 8000cb4:	444b      	add	r3, r9
 8000cb6:	106d      	asrs	r5, r5, #1
 8000cb8:	429d      	cmp	r5, r3
 8000cba:	bf38      	it	cc
 8000cbc:	461d      	movcc	r5, r3
 8000cbe:	0553      	lsls	r3, r2, #21
 8000cc0:	d527      	bpl.n	8000d12 <__ssputs_r+0x8e>
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	f7ff ff52 	bl	8000b6c <_malloc_r>
 8000cc8:	4606      	mov	r6, r0
 8000cca:	b360      	cbz	r0, 8000d26 <__ssputs_r+0xa2>
 8000ccc:	6921      	ldr	r1, [r4, #16]
 8000cce:	464a      	mov	r2, r9
 8000cd0:	f000 fae8 	bl	80012a4 <memcpy>
 8000cd4:	89a3      	ldrh	r3, [r4, #12]
 8000cd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cde:	81a3      	strh	r3, [r4, #12]
 8000ce0:	6126      	str	r6, [r4, #16]
 8000ce2:	6165      	str	r5, [r4, #20]
 8000ce4:	444e      	add	r6, r9
 8000ce6:	eba5 0509 	sub.w	r5, r5, r9
 8000cea:	6026      	str	r6, [r4, #0]
 8000cec:	60a5      	str	r5, [r4, #8]
 8000cee:	463e      	mov	r6, r7
 8000cf0:	42be      	cmp	r6, r7
 8000cf2:	d900      	bls.n	8000cf6 <__ssputs_r+0x72>
 8000cf4:	463e      	mov	r6, r7
 8000cf6:	6820      	ldr	r0, [r4, #0]
 8000cf8:	4632      	mov	r2, r6
 8000cfa:	4641      	mov	r1, r8
 8000cfc:	f000 faa8 	bl	8001250 <memmove>
 8000d00:	68a3      	ldr	r3, [r4, #8]
 8000d02:	1b9b      	subs	r3, r3, r6
 8000d04:	60a3      	str	r3, [r4, #8]
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	4433      	add	r3, r6
 8000d0a:	6023      	str	r3, [r4, #0]
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	462a      	mov	r2, r5
 8000d14:	f000 fad4 	bl	80012c0 <_realloc_r>
 8000d18:	4606      	mov	r6, r0
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d1e0      	bne.n	8000ce0 <__ssputs_r+0x5c>
 8000d1e:	6921      	ldr	r1, [r4, #16]
 8000d20:	4650      	mov	r0, sl
 8000d22:	f7ff feb7 	bl	8000a94 <_free_r>
 8000d26:	230c      	movs	r3, #12
 8000d28:	f8ca 3000 	str.w	r3, [sl]
 8000d2c:	89a3      	ldrh	r3, [r4, #12]
 8000d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d32:	81a3      	strh	r3, [r4, #12]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d38:	e7e9      	b.n	8000d0e <__ssputs_r+0x8a>
	...

08000d3c <_svfiprintf_r>:
 8000d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d40:	4698      	mov	r8, r3
 8000d42:	898b      	ldrh	r3, [r1, #12]
 8000d44:	061b      	lsls	r3, r3, #24
 8000d46:	b09d      	sub	sp, #116	@ 0x74
 8000d48:	4607      	mov	r7, r0
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4614      	mov	r4, r2
 8000d4e:	d510      	bpl.n	8000d72 <_svfiprintf_r+0x36>
 8000d50:	690b      	ldr	r3, [r1, #16]
 8000d52:	b973      	cbnz	r3, 8000d72 <_svfiprintf_r+0x36>
 8000d54:	2140      	movs	r1, #64	@ 0x40
 8000d56:	f7ff ff09 	bl	8000b6c <_malloc_r>
 8000d5a:	6028      	str	r0, [r5, #0]
 8000d5c:	6128      	str	r0, [r5, #16]
 8000d5e:	b930      	cbnz	r0, 8000d6e <_svfiprintf_r+0x32>
 8000d60:	230c      	movs	r3, #12
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d68:	b01d      	add	sp, #116	@ 0x74
 8000d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d6e:	2340      	movs	r3, #64	@ 0x40
 8000d70:	616b      	str	r3, [r5, #20]
 8000d72:	2300      	movs	r3, #0
 8000d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d76:	2320      	movs	r3, #32
 8000d78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d80:	2330      	movs	r3, #48	@ 0x30
 8000d82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000f20 <_svfiprintf_r+0x1e4>
 8000d86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d8a:	f04f 0901 	mov.w	r9, #1
 8000d8e:	4623      	mov	r3, r4
 8000d90:	469a      	mov	sl, r3
 8000d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d96:	b10a      	cbz	r2, 8000d9c <_svfiprintf_r+0x60>
 8000d98:	2a25      	cmp	r2, #37	@ 0x25
 8000d9a:	d1f9      	bne.n	8000d90 <_svfiprintf_r+0x54>
 8000d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8000da0:	d00b      	beq.n	8000dba <_svfiprintf_r+0x7e>
 8000da2:	465b      	mov	r3, fp
 8000da4:	4622      	mov	r2, r4
 8000da6:	4629      	mov	r1, r5
 8000da8:	4638      	mov	r0, r7
 8000daa:	f7ff ff6b 	bl	8000c84 <__ssputs_r>
 8000dae:	3001      	adds	r0, #1
 8000db0:	f000 80a7 	beq.w	8000f02 <_svfiprintf_r+0x1c6>
 8000db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000db6:	445a      	add	r2, fp
 8000db8:	9209      	str	r2, [sp, #36]	@ 0x24
 8000dba:	f89a 3000 	ldrb.w	r3, [sl]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 809f 	beq.w	8000f02 <_svfiprintf_r+0x1c6>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dce:	f10a 0a01 	add.w	sl, sl, #1
 8000dd2:	9304      	str	r3, [sp, #16]
 8000dd4:	9307      	str	r3, [sp, #28]
 8000dd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000dda:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ddc:	4654      	mov	r4, sl
 8000dde:	2205      	movs	r2, #5
 8000de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000de4:	484e      	ldr	r0, [pc, #312]	@ (8000f20 <_svfiprintf_r+0x1e4>)
 8000de6:	f7ff f9f3 	bl	80001d0 <memchr>
 8000dea:	9a04      	ldr	r2, [sp, #16]
 8000dec:	b9d8      	cbnz	r0, 8000e26 <_svfiprintf_r+0xea>
 8000dee:	06d0      	lsls	r0, r2, #27
 8000df0:	bf44      	itt	mi
 8000df2:	2320      	movmi	r3, #32
 8000df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000df8:	0711      	lsls	r1, r2, #28
 8000dfa:	bf44      	itt	mi
 8000dfc:	232b      	movmi	r3, #43	@ 0x2b
 8000dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e02:	f89a 3000 	ldrb.w	r3, [sl]
 8000e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e08:	d015      	beq.n	8000e36 <_svfiprintf_r+0xfa>
 8000e0a:	9a07      	ldr	r2, [sp, #28]
 8000e0c:	4654      	mov	r4, sl
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f04f 0c0a 	mov.w	ip, #10
 8000e14:	4621      	mov	r1, r4
 8000e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e1a:	3b30      	subs	r3, #48	@ 0x30
 8000e1c:	2b09      	cmp	r3, #9
 8000e1e:	d94b      	bls.n	8000eb8 <_svfiprintf_r+0x17c>
 8000e20:	b1b0      	cbz	r0, 8000e50 <_svfiprintf_r+0x114>
 8000e22:	9207      	str	r2, [sp, #28]
 8000e24:	e014      	b.n	8000e50 <_svfiprintf_r+0x114>
 8000e26:	eba0 0308 	sub.w	r3, r0, r8
 8000e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	9304      	str	r3, [sp, #16]
 8000e32:	46a2      	mov	sl, r4
 8000e34:	e7d2      	b.n	8000ddc <_svfiprintf_r+0xa0>
 8000e36:	9b03      	ldr	r3, [sp, #12]
 8000e38:	1d19      	adds	r1, r3, #4
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	9103      	str	r1, [sp, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bfbb      	ittet	lt
 8000e42:	425b      	neglt	r3, r3
 8000e44:	f042 0202 	orrlt.w	r2, r2, #2
 8000e48:	9307      	strge	r3, [sp, #28]
 8000e4a:	9307      	strlt	r3, [sp, #28]
 8000e4c:	bfb8      	it	lt
 8000e4e:	9204      	strlt	r2, [sp, #16]
 8000e50:	7823      	ldrb	r3, [r4, #0]
 8000e52:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e54:	d10a      	bne.n	8000e6c <_svfiprintf_r+0x130>
 8000e56:	7863      	ldrb	r3, [r4, #1]
 8000e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e5a:	d132      	bne.n	8000ec2 <_svfiprintf_r+0x186>
 8000e5c:	9b03      	ldr	r3, [sp, #12]
 8000e5e:	1d1a      	adds	r2, r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	9203      	str	r2, [sp, #12]
 8000e64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e68:	3402      	adds	r4, #2
 8000e6a:	9305      	str	r3, [sp, #20]
 8000e6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000f24 <_svfiprintf_r+0x1e8>
 8000e70:	7821      	ldrb	r1, [r4, #0]
 8000e72:	2203      	movs	r2, #3
 8000e74:	4650      	mov	r0, sl
 8000e76:	f7ff f9ab 	bl	80001d0 <memchr>
 8000e7a:	b138      	cbz	r0, 8000e8c <_svfiprintf_r+0x150>
 8000e7c:	9b04      	ldr	r3, [sp, #16]
 8000e7e:	eba0 000a 	sub.w	r0, r0, sl
 8000e82:	2240      	movs	r2, #64	@ 0x40
 8000e84:	4082      	lsls	r2, r0
 8000e86:	4313      	orrs	r3, r2
 8000e88:	3401      	adds	r4, #1
 8000e8a:	9304      	str	r3, [sp, #16]
 8000e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e90:	4825      	ldr	r0, [pc, #148]	@ (8000f28 <_svfiprintf_r+0x1ec>)
 8000e92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e96:	2206      	movs	r2, #6
 8000e98:	f7ff f99a 	bl	80001d0 <memchr>
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d036      	beq.n	8000f0e <_svfiprintf_r+0x1d2>
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <_svfiprintf_r+0x1f0>)
 8000ea2:	bb1b      	cbnz	r3, 8000eec <_svfiprintf_r+0x1b0>
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	3307      	adds	r3, #7
 8000ea8:	f023 0307 	bic.w	r3, r3, #7
 8000eac:	3308      	adds	r3, #8
 8000eae:	9303      	str	r3, [sp, #12]
 8000eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000eb2:	4433      	add	r3, r6
 8000eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000eb6:	e76a      	b.n	8000d8e <_svfiprintf_r+0x52>
 8000eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ebc:	460c      	mov	r4, r1
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	e7a8      	b.n	8000e14 <_svfiprintf_r+0xd8>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	3401      	adds	r4, #1
 8000ec6:	9305      	str	r3, [sp, #20]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 0c0a 	mov.w	ip, #10
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ed4:	3a30      	subs	r2, #48	@ 0x30
 8000ed6:	2a09      	cmp	r2, #9
 8000ed8:	d903      	bls.n	8000ee2 <_svfiprintf_r+0x1a6>
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0c6      	beq.n	8000e6c <_svfiprintf_r+0x130>
 8000ede:	9105      	str	r1, [sp, #20]
 8000ee0:	e7c4      	b.n	8000e6c <_svfiprintf_r+0x130>
 8000ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e7f0      	b.n	8000ece <_svfiprintf_r+0x192>
 8000eec:	ab03      	add	r3, sp, #12
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	462a      	mov	r2, r5
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <_svfiprintf_r+0x1f4>)
 8000ef4:	a904      	add	r1, sp, #16
 8000ef6:	4638      	mov	r0, r7
 8000ef8:	f3af 8000 	nop.w
 8000efc:	1c42      	adds	r2, r0, #1
 8000efe:	4606      	mov	r6, r0
 8000f00:	d1d6      	bne.n	8000eb0 <_svfiprintf_r+0x174>
 8000f02:	89ab      	ldrh	r3, [r5, #12]
 8000f04:	065b      	lsls	r3, r3, #25
 8000f06:	f53f af2d 	bmi.w	8000d64 <_svfiprintf_r+0x28>
 8000f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f0c:	e72c      	b.n	8000d68 <_svfiprintf_r+0x2c>
 8000f0e:	ab03      	add	r3, sp, #12
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	462a      	mov	r2, r5
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <_svfiprintf_r+0x1f4>)
 8000f16:	a904      	add	r1, sp, #16
 8000f18:	4638      	mov	r0, r7
 8000f1a:	f000 f879 	bl	8001010 <_printf_i>
 8000f1e:	e7ed      	b.n	8000efc <_svfiprintf_r+0x1c0>
 8000f20:	080013a3 	.word	0x080013a3
 8000f24:	080013a9 	.word	0x080013a9
 8000f28:	080013ad 	.word	0x080013ad
 8000f2c:	00000000 	.word	0x00000000
 8000f30:	08000c85 	.word	0x08000c85

08000f34 <_printf_common>:
 8000f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	4616      	mov	r6, r2
 8000f3a:	4698      	mov	r8, r3
 8000f3c:	688a      	ldr	r2, [r1, #8]
 8000f3e:	690b      	ldr	r3, [r1, #16]
 8000f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f44:	4293      	cmp	r3, r2
 8000f46:	bfb8      	it	lt
 8000f48:	4613      	movlt	r3, r2
 8000f4a:	6033      	str	r3, [r6, #0]
 8000f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f50:	4607      	mov	r7, r0
 8000f52:	460c      	mov	r4, r1
 8000f54:	b10a      	cbz	r2, 8000f5a <_printf_common+0x26>
 8000f56:	3301      	adds	r3, #1
 8000f58:	6033      	str	r3, [r6, #0]
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	0699      	lsls	r1, r3, #26
 8000f5e:	bf42      	ittt	mi
 8000f60:	6833      	ldrmi	r3, [r6, #0]
 8000f62:	3302      	addmi	r3, #2
 8000f64:	6033      	strmi	r3, [r6, #0]
 8000f66:	6825      	ldr	r5, [r4, #0]
 8000f68:	f015 0506 	ands.w	r5, r5, #6
 8000f6c:	d106      	bne.n	8000f7c <_printf_common+0x48>
 8000f6e:	f104 0a19 	add.w	sl, r4, #25
 8000f72:	68e3      	ldr	r3, [r4, #12]
 8000f74:	6832      	ldr	r2, [r6, #0]
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	42ab      	cmp	r3, r5
 8000f7a:	dc26      	bgt.n	8000fca <_printf_common+0x96>
 8000f7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f80:	6822      	ldr	r2, [r4, #0]
 8000f82:	3b00      	subs	r3, #0
 8000f84:	bf18      	it	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	0692      	lsls	r2, r2, #26
 8000f8a:	d42b      	bmi.n	8000fe4 <_printf_common+0xb0>
 8000f8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f90:	4641      	mov	r1, r8
 8000f92:	4638      	mov	r0, r7
 8000f94:	47c8      	blx	r9
 8000f96:	3001      	adds	r0, #1
 8000f98:	d01e      	beq.n	8000fd8 <_printf_common+0xa4>
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	6922      	ldr	r2, [r4, #16]
 8000f9e:	f003 0306 	and.w	r3, r3, #6
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf02      	ittt	eq
 8000fa6:	68e5      	ldreq	r5, [r4, #12]
 8000fa8:	6833      	ldreq	r3, [r6, #0]
 8000faa:	1aed      	subeq	r5, r5, r3
 8000fac:	68a3      	ldr	r3, [r4, #8]
 8000fae:	bf0c      	ite	eq
 8000fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fb4:	2500      	movne	r5, #0
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	bfc4      	itt	gt
 8000fba:	1a9b      	subgt	r3, r3, r2
 8000fbc:	18ed      	addgt	r5, r5, r3
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	341a      	adds	r4, #26
 8000fc2:	42b5      	cmp	r5, r6
 8000fc4:	d11a      	bne.n	8000ffc <_printf_common+0xc8>
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	e008      	b.n	8000fdc <_printf_common+0xa8>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	4652      	mov	r2, sl
 8000fce:	4641      	mov	r1, r8
 8000fd0:	4638      	mov	r0, r7
 8000fd2:	47c8      	blx	r9
 8000fd4:	3001      	adds	r0, #1
 8000fd6:	d103      	bne.n	8000fe0 <_printf_common+0xac>
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe0:	3501      	adds	r5, #1
 8000fe2:	e7c6      	b.n	8000f72 <_printf_common+0x3e>
 8000fe4:	18e1      	adds	r1, r4, r3
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	2030      	movs	r0, #48	@ 0x30
 8000fea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000fee:	4422      	add	r2, r4
 8000ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000ff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	e7c7      	b.n	8000f8c <_printf_common+0x58>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	4622      	mov	r2, r4
 8001000:	4641      	mov	r1, r8
 8001002:	4638      	mov	r0, r7
 8001004:	47c8      	blx	r9
 8001006:	3001      	adds	r0, #1
 8001008:	d0e6      	beq.n	8000fd8 <_printf_common+0xa4>
 800100a:	3601      	adds	r6, #1
 800100c:	e7d9      	b.n	8000fc2 <_printf_common+0x8e>
	...

08001010 <_printf_i>:
 8001010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001014:	7e0f      	ldrb	r7, [r1, #24]
 8001016:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001018:	2f78      	cmp	r7, #120	@ 0x78
 800101a:	4691      	mov	r9, r2
 800101c:	4680      	mov	r8, r0
 800101e:	460c      	mov	r4, r1
 8001020:	469a      	mov	sl, r3
 8001022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001026:	d807      	bhi.n	8001038 <_printf_i+0x28>
 8001028:	2f62      	cmp	r7, #98	@ 0x62
 800102a:	d80a      	bhi.n	8001042 <_printf_i+0x32>
 800102c:	2f00      	cmp	r7, #0
 800102e:	f000 80d2 	beq.w	80011d6 <_printf_i+0x1c6>
 8001032:	2f58      	cmp	r7, #88	@ 0x58
 8001034:	f000 80b9 	beq.w	80011aa <_printf_i+0x19a>
 8001038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800103c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001040:	e03a      	b.n	80010b8 <_printf_i+0xa8>
 8001042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001046:	2b15      	cmp	r3, #21
 8001048:	d8f6      	bhi.n	8001038 <_printf_i+0x28>
 800104a:	a101      	add	r1, pc, #4	@ (adr r1, 8001050 <_printf_i+0x40>)
 800104c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001050:	080010a9 	.word	0x080010a9
 8001054:	080010bd 	.word	0x080010bd
 8001058:	08001039 	.word	0x08001039
 800105c:	08001039 	.word	0x08001039
 8001060:	08001039 	.word	0x08001039
 8001064:	08001039 	.word	0x08001039
 8001068:	080010bd 	.word	0x080010bd
 800106c:	08001039 	.word	0x08001039
 8001070:	08001039 	.word	0x08001039
 8001074:	08001039 	.word	0x08001039
 8001078:	08001039 	.word	0x08001039
 800107c:	080011bd 	.word	0x080011bd
 8001080:	080010e7 	.word	0x080010e7
 8001084:	08001177 	.word	0x08001177
 8001088:	08001039 	.word	0x08001039
 800108c:	08001039 	.word	0x08001039
 8001090:	080011df 	.word	0x080011df
 8001094:	08001039 	.word	0x08001039
 8001098:	080010e7 	.word	0x080010e7
 800109c:	08001039 	.word	0x08001039
 80010a0:	08001039 	.word	0x08001039
 80010a4:	0800117f 	.word	0x0800117f
 80010a8:	6833      	ldr	r3, [r6, #0]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6032      	str	r2, [r6, #0]
 80010b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010b8:	2301      	movs	r3, #1
 80010ba:	e09d      	b.n	80011f8 <_printf_i+0x1e8>
 80010bc:	6833      	ldr	r3, [r6, #0]
 80010be:	6820      	ldr	r0, [r4, #0]
 80010c0:	1d19      	adds	r1, r3, #4
 80010c2:	6031      	str	r1, [r6, #0]
 80010c4:	0606      	lsls	r6, r0, #24
 80010c6:	d501      	bpl.n	80010cc <_printf_i+0xbc>
 80010c8:	681d      	ldr	r5, [r3, #0]
 80010ca:	e003      	b.n	80010d4 <_printf_i+0xc4>
 80010cc:	0645      	lsls	r5, r0, #25
 80010ce:	d5fb      	bpl.n	80010c8 <_printf_i+0xb8>
 80010d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010d4:	2d00      	cmp	r5, #0
 80010d6:	da03      	bge.n	80010e0 <_printf_i+0xd0>
 80010d8:	232d      	movs	r3, #45	@ 0x2d
 80010da:	426d      	negs	r5, r5
 80010dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010e0:	4859      	ldr	r0, [pc, #356]	@ (8001248 <_printf_i+0x238>)
 80010e2:	230a      	movs	r3, #10
 80010e4:	e011      	b.n	800110a <_printf_i+0xfa>
 80010e6:	6821      	ldr	r1, [r4, #0]
 80010e8:	6833      	ldr	r3, [r6, #0]
 80010ea:	0608      	lsls	r0, r1, #24
 80010ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80010f0:	d402      	bmi.n	80010f8 <_printf_i+0xe8>
 80010f2:	0649      	lsls	r1, r1, #25
 80010f4:	bf48      	it	mi
 80010f6:	b2ad      	uxthmi	r5, r5
 80010f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80010fa:	4853      	ldr	r0, [pc, #332]	@ (8001248 <_printf_i+0x238>)
 80010fc:	6033      	str	r3, [r6, #0]
 80010fe:	bf14      	ite	ne
 8001100:	230a      	movne	r3, #10
 8001102:	2308      	moveq	r3, #8
 8001104:	2100      	movs	r1, #0
 8001106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800110a:	6866      	ldr	r6, [r4, #4]
 800110c:	60a6      	str	r6, [r4, #8]
 800110e:	2e00      	cmp	r6, #0
 8001110:	bfa2      	ittt	ge
 8001112:	6821      	ldrge	r1, [r4, #0]
 8001114:	f021 0104 	bicge.w	r1, r1, #4
 8001118:	6021      	strge	r1, [r4, #0]
 800111a:	b90d      	cbnz	r5, 8001120 <_printf_i+0x110>
 800111c:	2e00      	cmp	r6, #0
 800111e:	d04b      	beq.n	80011b8 <_printf_i+0x1a8>
 8001120:	4616      	mov	r6, r2
 8001122:	fbb5 f1f3 	udiv	r1, r5, r3
 8001126:	fb03 5711 	mls	r7, r3, r1, r5
 800112a:	5dc7      	ldrb	r7, [r0, r7]
 800112c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001130:	462f      	mov	r7, r5
 8001132:	42bb      	cmp	r3, r7
 8001134:	460d      	mov	r5, r1
 8001136:	d9f4      	bls.n	8001122 <_printf_i+0x112>
 8001138:	2b08      	cmp	r3, #8
 800113a:	d10b      	bne.n	8001154 <_printf_i+0x144>
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	07df      	lsls	r7, r3, #31
 8001140:	d508      	bpl.n	8001154 <_printf_i+0x144>
 8001142:	6923      	ldr	r3, [r4, #16]
 8001144:	6861      	ldr	r1, [r4, #4]
 8001146:	4299      	cmp	r1, r3
 8001148:	bfde      	ittt	le
 800114a:	2330      	movle	r3, #48	@ 0x30
 800114c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001150:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001154:	1b92      	subs	r2, r2, r6
 8001156:	6122      	str	r2, [r4, #16]
 8001158:	f8cd a000 	str.w	sl, [sp]
 800115c:	464b      	mov	r3, r9
 800115e:	aa03      	add	r2, sp, #12
 8001160:	4621      	mov	r1, r4
 8001162:	4640      	mov	r0, r8
 8001164:	f7ff fee6 	bl	8000f34 <_printf_common>
 8001168:	3001      	adds	r0, #1
 800116a:	d14a      	bne.n	8001202 <_printf_i+0x1f2>
 800116c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001170:	b004      	add	sp, #16
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	6023      	str	r3, [r4, #0]
 800117e:	4833      	ldr	r0, [pc, #204]	@ (800124c <_printf_i+0x23c>)
 8001180:	2778      	movs	r7, #120	@ 0x78
 8001182:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	6831      	ldr	r1, [r6, #0]
 800118a:	061f      	lsls	r7, r3, #24
 800118c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001190:	d402      	bmi.n	8001198 <_printf_i+0x188>
 8001192:	065f      	lsls	r7, r3, #25
 8001194:	bf48      	it	mi
 8001196:	b2ad      	uxthmi	r5, r5
 8001198:	6031      	str	r1, [r6, #0]
 800119a:	07d9      	lsls	r1, r3, #31
 800119c:	bf44      	itt	mi
 800119e:	f043 0320 	orrmi.w	r3, r3, #32
 80011a2:	6023      	strmi	r3, [r4, #0]
 80011a4:	b11d      	cbz	r5, 80011ae <_printf_i+0x19e>
 80011a6:	2310      	movs	r3, #16
 80011a8:	e7ac      	b.n	8001104 <_printf_i+0xf4>
 80011aa:	4827      	ldr	r0, [pc, #156]	@ (8001248 <_printf_i+0x238>)
 80011ac:	e7e9      	b.n	8001182 <_printf_i+0x172>
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	f023 0320 	bic.w	r3, r3, #32
 80011b4:	6023      	str	r3, [r4, #0]
 80011b6:	e7f6      	b.n	80011a6 <_printf_i+0x196>
 80011b8:	4616      	mov	r6, r2
 80011ba:	e7bd      	b.n	8001138 <_printf_i+0x128>
 80011bc:	6833      	ldr	r3, [r6, #0]
 80011be:	6825      	ldr	r5, [r4, #0]
 80011c0:	6961      	ldr	r1, [r4, #20]
 80011c2:	1d18      	adds	r0, r3, #4
 80011c4:	6030      	str	r0, [r6, #0]
 80011c6:	062e      	lsls	r6, r5, #24
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	d501      	bpl.n	80011d0 <_printf_i+0x1c0>
 80011cc:	6019      	str	r1, [r3, #0]
 80011ce:	e002      	b.n	80011d6 <_printf_i+0x1c6>
 80011d0:	0668      	lsls	r0, r5, #25
 80011d2:	d5fb      	bpl.n	80011cc <_printf_i+0x1bc>
 80011d4:	8019      	strh	r1, [r3, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	6123      	str	r3, [r4, #16]
 80011da:	4616      	mov	r6, r2
 80011dc:	e7bc      	b.n	8001158 <_printf_i+0x148>
 80011de:	6833      	ldr	r3, [r6, #0]
 80011e0:	1d1a      	adds	r2, r3, #4
 80011e2:	6032      	str	r2, [r6, #0]
 80011e4:	681e      	ldr	r6, [r3, #0]
 80011e6:	6862      	ldr	r2, [r4, #4]
 80011e8:	2100      	movs	r1, #0
 80011ea:	4630      	mov	r0, r6
 80011ec:	f7fe fff0 	bl	80001d0 <memchr>
 80011f0:	b108      	cbz	r0, 80011f6 <_printf_i+0x1e6>
 80011f2:	1b80      	subs	r0, r0, r6
 80011f4:	6060      	str	r0, [r4, #4]
 80011f6:	6863      	ldr	r3, [r4, #4]
 80011f8:	6123      	str	r3, [r4, #16]
 80011fa:	2300      	movs	r3, #0
 80011fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001200:	e7aa      	b.n	8001158 <_printf_i+0x148>
 8001202:	6923      	ldr	r3, [r4, #16]
 8001204:	4632      	mov	r2, r6
 8001206:	4649      	mov	r1, r9
 8001208:	4640      	mov	r0, r8
 800120a:	47d0      	blx	sl
 800120c:	3001      	adds	r0, #1
 800120e:	d0ad      	beq.n	800116c <_printf_i+0x15c>
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	079b      	lsls	r3, r3, #30
 8001214:	d413      	bmi.n	800123e <_printf_i+0x22e>
 8001216:	68e0      	ldr	r0, [r4, #12]
 8001218:	9b03      	ldr	r3, [sp, #12]
 800121a:	4298      	cmp	r0, r3
 800121c:	bfb8      	it	lt
 800121e:	4618      	movlt	r0, r3
 8001220:	e7a6      	b.n	8001170 <_printf_i+0x160>
 8001222:	2301      	movs	r3, #1
 8001224:	4632      	mov	r2, r6
 8001226:	4649      	mov	r1, r9
 8001228:	4640      	mov	r0, r8
 800122a:	47d0      	blx	sl
 800122c:	3001      	adds	r0, #1
 800122e:	d09d      	beq.n	800116c <_printf_i+0x15c>
 8001230:	3501      	adds	r5, #1
 8001232:	68e3      	ldr	r3, [r4, #12]
 8001234:	9903      	ldr	r1, [sp, #12]
 8001236:	1a5b      	subs	r3, r3, r1
 8001238:	42ab      	cmp	r3, r5
 800123a:	dcf2      	bgt.n	8001222 <_printf_i+0x212>
 800123c:	e7eb      	b.n	8001216 <_printf_i+0x206>
 800123e:	2500      	movs	r5, #0
 8001240:	f104 0619 	add.w	r6, r4, #25
 8001244:	e7f5      	b.n	8001232 <_printf_i+0x222>
 8001246:	bf00      	nop
 8001248:	080013b4 	.word	0x080013b4
 800124c:	080013c5 	.word	0x080013c5

08001250 <memmove>:
 8001250:	4288      	cmp	r0, r1
 8001252:	b510      	push	{r4, lr}
 8001254:	eb01 0402 	add.w	r4, r1, r2
 8001258:	d902      	bls.n	8001260 <memmove+0x10>
 800125a:	4284      	cmp	r4, r0
 800125c:	4623      	mov	r3, r4
 800125e:	d807      	bhi.n	8001270 <memmove+0x20>
 8001260:	1e43      	subs	r3, r0, #1
 8001262:	42a1      	cmp	r1, r4
 8001264:	d008      	beq.n	8001278 <memmove+0x28>
 8001266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800126a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800126e:	e7f8      	b.n	8001262 <memmove+0x12>
 8001270:	4402      	add	r2, r0
 8001272:	4601      	mov	r1, r0
 8001274:	428a      	cmp	r2, r1
 8001276:	d100      	bne.n	800127a <memmove+0x2a>
 8001278:	bd10      	pop	{r4, pc}
 800127a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800127e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001282:	e7f7      	b.n	8001274 <memmove+0x24>

08001284 <_sbrk_r>:
 8001284:	b538      	push	{r3, r4, r5, lr}
 8001286:	4d06      	ldr	r5, [pc, #24]	@ (80012a0 <_sbrk_r+0x1c>)
 8001288:	2300      	movs	r3, #0
 800128a:	4604      	mov	r4, r0
 800128c:	4608      	mov	r0, r1
 800128e:	602b      	str	r3, [r5, #0]
 8001290:	f7ff fa2a 	bl	80006e8 <_sbrk>
 8001294:	1c43      	adds	r3, r0, #1
 8001296:	d102      	bne.n	800129e <_sbrk_r+0x1a>
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	b103      	cbz	r3, 800129e <_sbrk_r+0x1a>
 800129c:	6023      	str	r3, [r4, #0]
 800129e:	bd38      	pop	{r3, r4, r5, pc}
 80012a0:	200001b8 	.word	0x200001b8

080012a4 <memcpy>:
 80012a4:	440a      	add	r2, r1
 80012a6:	4291      	cmp	r1, r2
 80012a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80012ac:	d100      	bne.n	80012b0 <memcpy+0xc>
 80012ae:	4770      	bx	lr
 80012b0:	b510      	push	{r4, lr}
 80012b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80012ba:	4291      	cmp	r1, r2
 80012bc:	d1f9      	bne.n	80012b2 <memcpy+0xe>
 80012be:	bd10      	pop	{r4, pc}

080012c0 <_realloc_r>:
 80012c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	4680      	mov	r8, r0
 80012c6:	4615      	mov	r5, r2
 80012c8:	460c      	mov	r4, r1
 80012ca:	b921      	cbnz	r1, 80012d6 <_realloc_r+0x16>
 80012cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012d0:	4611      	mov	r1, r2
 80012d2:	f7ff bc4b 	b.w	8000b6c <_malloc_r>
 80012d6:	b92a      	cbnz	r2, 80012e4 <_realloc_r+0x24>
 80012d8:	f7ff fbdc 	bl	8000a94 <_free_r>
 80012dc:	2400      	movs	r4, #0
 80012de:	4620      	mov	r0, r4
 80012e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012e4:	f000 f81a 	bl	800131c <_malloc_usable_size_r>
 80012e8:	4285      	cmp	r5, r0
 80012ea:	4606      	mov	r6, r0
 80012ec:	d802      	bhi.n	80012f4 <_realloc_r+0x34>
 80012ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80012f2:	d8f4      	bhi.n	80012de <_realloc_r+0x1e>
 80012f4:	4629      	mov	r1, r5
 80012f6:	4640      	mov	r0, r8
 80012f8:	f7ff fc38 	bl	8000b6c <_malloc_r>
 80012fc:	4607      	mov	r7, r0
 80012fe:	2800      	cmp	r0, #0
 8001300:	d0ec      	beq.n	80012dc <_realloc_r+0x1c>
 8001302:	42b5      	cmp	r5, r6
 8001304:	462a      	mov	r2, r5
 8001306:	4621      	mov	r1, r4
 8001308:	bf28      	it	cs
 800130a:	4632      	movcs	r2, r6
 800130c:	f7ff ffca 	bl	80012a4 <memcpy>
 8001310:	4621      	mov	r1, r4
 8001312:	4640      	mov	r0, r8
 8001314:	f7ff fbbe 	bl	8000a94 <_free_r>
 8001318:	463c      	mov	r4, r7
 800131a:	e7e0      	b.n	80012de <_realloc_r+0x1e>

0800131c <_malloc_usable_size_r>:
 800131c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001320:	1f18      	subs	r0, r3, #4
 8001322:	2b00      	cmp	r3, #0
 8001324:	bfbc      	itt	lt
 8001326:	580b      	ldrlt	r3, [r1, r0]
 8001328:	18c0      	addlt	r0, r0, r3
 800132a:	4770      	bx	lr

0800132c <_init>:
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	bf00      	nop
 8001330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001332:	bc08      	pop	{r3}
 8001334:	469e      	mov	lr, r3
 8001336:	4770      	bx	lr

08001338 <_fini>:
 8001338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133a:	bf00      	nop
 800133c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800133e:	bc08      	pop	{r3}
 8001340:	469e      	mov	lr, r3
 8001342:	4770      	bx	lr
